{"version":3,"sources":["components/products/ProductList.js","components/ui/NavigationBar.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["ProductList","props","changeProduct","e","setState","value","target","state","showProduct","productItem","Fragment","className","style","display","justifyContent","padding","items","products","shouldItemRender","item","title","toLowerCase","indexOf","getItemValue","renderItem","isHighlighted","background","key","this","onChange","onSelect","console","log","React","Component","ShowProdcutList","Table","striped","bordered","hover","type","description","price","Styles","styled","div","withRouter","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","as","to","RouterPage","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o6DAKaA,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOD,QAAS,gBARzC,EAAKE,MAAQ,CACXF,MAAO,GACPG,aAAa,EACbC,YAAa,IALE,EADrB,qDAaY,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,UACb,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,QAAS,QAGX,kBAAC,IAAD,CACEC,MAAOC,EACPC,iBAAkB,SAACC,EAAMd,GAAP,OAChBc,EAAKC,MAAMC,cAAcC,QAAQjB,EAAMgB,gBAAkB,GAE3DE,aAAc,SAACJ,GAAD,OAAUA,EAAKC,OAC7BI,WAAY,SAACL,EAAMM,GAAP,OACV,yBACEb,MAAO,CAAEc,WAAYD,EAAgB,OAAS,SAC9CE,IAAKR,EAAKC,OAETD,EAAKC,QAGVf,MAAOuB,KAAKrB,MAAMF,MAClBwB,SAAUD,KAAK1B,cACf4B,SAAU,SAACzB,EAAOc,GAChBY,QAAQC,IAAIb,GACZ,EAAKf,SACH,CAAEC,QAAOG,aAAa,EAAMC,YAAaU,IACzC,WACEY,QAAQC,IAAI,EAAKzB,MAAMF,eAML,IAA3BuB,KAAKrB,MAAMC,YACV,kBAAC,EAAD,CAAiBQ,MAAOY,KAAKrB,MAAME,aAAnC,KAEA,SAtDZ,GAAiCwB,IAAMC,WA8DjCC,EAAkB,SAAClC,GACvB8B,QAAQC,IAAI/B,GACZ,IAAMe,EAAQf,EAAMe,MACpB,OACE,oCACE,6BACA,kBAACoB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,qCACA,oCACA,2CACA,wCAGJ,+BACE,4BACE,4BAAKvB,EAAMI,OACX,4BAAKJ,EAAMwB,MACX,4BAAKxB,EAAMyB,aACX,4BAAKzB,EAAM0B,YAOR1C,I,uUCzFf,IAAM2C,E,MAASC,EAAOC,IAAV,KAuCGC,mBApBf,SAAuB7C,GACrB,OACE,kBAAC0C,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,kBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAK5C,UAAU,WACb,kBAAC4C,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,gBC3BDC,EAAa,WACtB,OACI,oCACA,kBAAC,IAAD,KACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW9D,QCGxB+D,MAVf,WACE,OACE,kBAAC,IAAMrD,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SCGYsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.ce96c4de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Autocomplete from \"react-autocomplete\";\r\nimport products from \"./productsList.json\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nexport class ProductList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      showProduct: false,\r\n      productItem: {},\r\n    };\r\n  }\r\n\r\n  changeProduct = (e) => {\r\n    this.setState({ value: e.target.value }, () => {});\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"search\">\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              padding: \"7px\",\r\n            }}\r\n          >\r\n            <Autocomplete\r\n              items={products}\r\n              shouldItemRender={(item, value) =>\r\n                item.title.toLowerCase().indexOf(value.toLowerCase()) > -1\r\n              }\r\n              getItemValue={(item) => item.title}\r\n              renderItem={(item, isHighlighted) => (\r\n                <div\r\n                  style={{ background: isHighlighted ? \"grey\" : \"white\" }}\r\n                  key={item.title}\r\n                >\r\n                  {item.title}\r\n                </div>\r\n              )}\r\n              value={this.state.value}\r\n              onChange={this.changeProduct}\r\n              onSelect={(value, item) => {\r\n                console.log(item);\r\n                this.setState(\r\n                  { value, showProduct: true, productItem: item },\r\n                  () => {\r\n                    console.log(this.state.value);\r\n                  }\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          {this.state.showProduct === true ? (\r\n            <ShowProdcutList items={this.state.productItem}> </ShowProdcutList>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst ShowProdcutList = (props) => {\r\n  console.log(props);\r\n  const items = props.items\r\n  return (\r\n    <>\r\n      <br />\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Type</th>\r\n            <th>Description</th>\r\n            <th>Price </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{items.title}</td>\r\n            <td>{items.type}</td>\r\n            <td>{items.description}</td>\r\n            <td>{items.price}</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\nexport default ProductList;\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: #222;\r\n  }\r\n  .navbar-nav {\r\n    flex: 1;\r\n    justify-content: center;\r\n  }\r\n  a,\r\n  .navbar-brand,\r\n  .navbar-nav .nav-link {\r\n    color: #bbb;\r\n\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction NavigationBar(props) {\r\n  return (\r\n    <Styles>\r\n      <Navbar expand=\"lg\">\r\n        <Navbar.Brand href=\"/\">Infograin Test</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"ml-auto\">\r\n            <Nav.Item>\r\n              <Nav.Link as={Link} to=\"/\">\r\n                Home\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </Styles>\r\n  );\r\n}\r\n\r\nexport default withRouter(NavigationBar);\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport  ProductList  from '../components/products/ProductList';\r\nimport   NavigationBar  from '../components/ui/NavigationBar';\r\n\r\nexport const RouterPage = ()=>{\r\n    return (\r\n        <>\r\n        <Router >\r\n        <NavigationBar />\r\n        <Switch>\r\n            <Route path=\"/\" component={ProductList} />\r\n            \r\n          </Switch>\r\n        </Router>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {RouterPage} from './router/index';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <RouterPage/>     \n      </Router> \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}